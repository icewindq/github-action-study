#
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ['main']
    paths-ignore:
      - 'deploy/**'

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: write
      packages: write
      pull-requests: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      # # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}

      # - name: Build and push api components
      #   env:
      #     IMAGE_ITEMS: "bloger_release bloger_debug"
      #   run: |
      #     for item in "${{ env.IMAGE_ITEMS }}"; do
      #       echo "Building and pushing Docker image for $item"
      #       docker/build-push-action@v5
      #       with:
      #         context: src/dotnet/evc-platform
      #         target: chat_api
      #         push: false
      #         build-args: |
      #           NUGET_AUTH_USER=${{ github.repository_owner }}
      #           NUGET_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}
      #         tags: |
      #           ${{ env.REGISTRY }}/evc/${item}:${{ github.sha }}
      #         cache-from: type=gha
      #         cache-to: type=gha,mode=max
      #       done

      - name: Build and push release api components
        uses: docker/build-push-action@v5
        with:
          context: .
          target: bloger_release
          push: true
          build-args: |
            NUGET_AUTH_USER=${{ github.repository_owner }}
            NUGET_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/bloger:release-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push debug api components
        uses: docker/build-push-action@v5
        with:
          context: .
          target: bloger_debug
          push: true
          build-args: |
            NUGET_AUTH_USER=${{ github.repository_owner }}
            NUGET_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/bloger:dev-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: update dev version
      #   run: |
      #     git pull
      #     sed -i -E "s/\"imageTag\": ?\".+\"/\"imageTag\": \"dev-${{ github.sha }}\"/" deploy/dev/bloger.json
      #     git config --local user.email "actions-bot@users.noreply.github.com"
      #     git config --local user.name "actions-bot"
      #     git diff --quiet || (git commit -am 'update dev version: ${{ github.sha }}' && git push origin main)

      # - name: change live version locally
      #   run: |
      #     sed -i -E "s/\"imageTag\": ?\".+\"/\"imageTag\": \"live-${{ github.sha }}\"/" deploy/live/bloger.json \

      # - name: create PR for live env
      #   uses: peter-evans/create-pull-request@v6
      #   with:
      #     title: backend live release
      #     labels: release
      #     add-paths: |
      #       deploy/live/*
      #     commit-message: PR for live release, created by github actions bot
      #     delete-branch: true
      #     assignees: ${{ github.actor }}
      #     reviewers: icewindq-liu,icewindq